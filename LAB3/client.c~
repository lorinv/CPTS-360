//**************************** ECHO CLIENT CODE **************************
// The echo client client.c

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <sys/socket.h>
#include <netdb.h>

#define MAX 256

// Define variables
struct hostent *hp;              
struct sockaddr_in  server_addr; 

int sock, r;
int SERVER_IP, SERVER_PORT; 

char * checkRelPath (char * cwd, char * value)
{
	char * tempDir = cwd;	

	//Check if relative to root
	if (value[0] == '/')
	{
		tempDir = value;
	}
	// Path is relative to current dir	    
	else
	{
		strcat(tempDir,"/");
		strcat(temp, value);
	}

	return tempDir;
}

// clinet initialization code

int client_init(char *argv[])
{
  printf("======= clinet init ==========\n");

  printf("1 : get server info\n");
  hp = gethostbyname(argv[1]);
  if (hp==0){
     printf("unknown host %s\n", argv[1]);
     exit(1);
  }

  SERVER_IP   = *(long *)hp->h_addr;
  SERVER_PORT = atoi(argv[2]);

  printf("2 : create a TCP socket\n");
  sock = socket(AF_INET, SOCK_STREAM, 0);
  if (sock<0){
     printf("socket call failed\n");
     exit(2);
  }

  printf("3 : fill server_addr with server's IP and PORT#\n");
  server_addr.sin_family = AF_INET;
  server_addr.sin_addr.s_addr = SERVER_IP;
  server_addr.sin_port = htons(SERVER_PORT);

  // Connect to server
  printf("4 : connecting to server ....\n");
  r = connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr));
  if (r < 0){
     printf("connect failed\n");
     exit(1);
  }

  printf("5 : connected OK to \007\n"); 
  printf("---------------------------------------------------------\n");
  printf("hostname=%s  IP=%s  PORT=%d\n", 
          hp->h_name, inet_ntoa(SERVER_IP), SERVER_PORT);
  printf("---------------------------------------------------------\n");

  printf("========= init done ==========\n");
}

main(int argc, char *argv[ ])
{
  int n;
  char line[MAX], ans[MAX];

  if (argc < 3){
     printf("Usage : client ServerName SeverPort\n");
     exit(1);
  }

  client_init(argv);

  // Input a command
  // Check if command is local
  // If not,
  // Send Command to server
  // receive reply and results from server
  // Display the results

  m = getinputs();    // get user inputs name=value into entry[ ]
  getcwd(cwd, 128);   // get CWD pathname

  printf("********  processing loop  *********\n");
  while (1){
    printf("Enter a Command : ");
    bzero(line, MAX);                // zero out line[ ]
    fgets(line, MAX, stdin);         // get a line (end with \n) from stdin

    line[strlen(line)-1] = 0;        // kill \n at end
    if (line[0]==0)                  // exit if NULL line
       exit(0);

		//Preform the operation locally
		if (!strcmp(line, "lcat"))
		{
			//Prepare file to display
			tempDir = checkRelPath (cwd, entry[1].value)
			readFile = fopen(tempDir, "r");
			if (readFile != NULL)
			{
				readChar = fgetc(readFile);
				while (readChar != EOF)
			{
			//Check for new line
			if (readChar == '\n')
				printf("<br>");
			else
				printf("%c", readChar);
			readChar = fgetc(readFile);
		}
	}	
	fclose(readFile);
		}	
		else if (!strcmp(line, "lpwd"))
		{			
			printf("%s", getcwd(cwd, 128));
		}
		else if (!strcmp(line, "lls"))
		{
			//Check if relative to root
			tempDir = checkRelPath (cwd, entry[1].value)
		    DIR *dirHandle = NULL;
			struct dirent *dptr = NULL;
			dirHandle = opendir(tempDir);
			if (dirHandle != NULL)
			{
				dptr = readdir(dirHandle);
				for(i=0; dptr != NULL; i++)
				{
					printf("%s ",dptr->d_name);
					dptr = readdir(dirHandle);
				}
		    	printf("<br>");
			}	
		}
		else if (!strcmp(line, "lcd"))
		{
			
		}
		else if (!strcmp(line, "lmkdir"))
		{
			tempDir = checkRelPath (cwd, entry[1].value)
			mkdir(tempDir,0755);
		}
		else if (!strcmp(line, "lrmdir"))
		{
			tempDir = checkRelPath (cwd, entry[1].value)
		    rmdir(tempDir);
		}
		else if (!strcmp(line, "lrm"))
		{
			tempDir = checkRelPath (cwd, entry[1].value)
			unlink(tempDir);
		}
		else
		{
		// Send ENTIRE line to server
		n = write(sock, line, MAX);
		printf("client: wrote n=%d bytes; line=(%s)\n", n, line);

		// Read a line from sock and show it
		n = read(sock, ans, MAX);
		printf("client: read  n=%d bytes; echo=(%s)\n",n, ans);
	}
  }
}


